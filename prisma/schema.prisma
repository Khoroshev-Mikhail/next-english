generator client {
  provider = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role @default(USER)
  accounts      Account[]
  sessions      Session[]
  english       Word[] @relation("english")
  russian       Word[] @relation("russian")
  spelling      Word[] @relation("spelling")
  auding        Word[] @relation("auding")
  speaking      Word[] @relation("speaking") 
  @@map(name: "users")
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
    ADMIN
    USER
}
enum Word_Type {
  NOUN
  VERB
  ADJECTIVE
  AVERB
}
model Word{
  id            Int @id @default(autoincrement())
  eng           String
  rus           String 
  type          Word_Type?
  english       User[] @relation("english")
  russian       User[] @relation("russian")   
  spelling      User[] @relation("spelling")
  auding        User[] @relation("auding")  
  speaking      User[] @relation("speaking")  
  groups        Group[]
  visible       Boolean @default(true)
}
model Group{
  id            Int @id @default(autoincrement())
  eng           String @unique
  rus           String @unique
  words         Word[]
  text_id       Text?
  visible       Boolean @default(true)
}
model Text{
  id            Int @id @default(autoincrement())
  eng           String @unique
  rus           String @unique
  text          Json
  group         Group @relation(fields: [group_id], references: [id])
  group_id      Int @unique
  visible       Boolean @default(true)
}